// This file is @generated by prost-build.
/// Fetch node
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fetch {
    /// Specific LF version of the node
    #[prost(string, tag = "1")]
    pub lf_version: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub contract_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub package_name: ::prost::alloc::string::String,
    /// The identifier uses the package-id reference format.
    #[prost(message, optional, tag = "4")]
    pub template_id: ::core::option::Option<super::super::super::Identifier>,
    #[prost(string, repeated, tag = "5")]
    pub signatories: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "6")]
    pub stakeholders: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "7")]
    pub acting_parties: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Optional
    #[prost(message, optional, tag = "8")]
    pub interface_id: ::core::option::Option<super::super::super::Identifier>,
}
/// Exercise node
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Exercise {
    /// Specific LF version of the node
    #[prost(string, tag = "1")]
    pub lf_version: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub contract_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub package_name: ::prost::alloc::string::String,
    /// The identifier uses the package-id reference format.
    #[prost(message, optional, tag = "4")]
    pub template_id: ::core::option::Option<super::super::super::Identifier>,
    #[prost(string, repeated, tag = "5")]
    pub signatories: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "6")]
    pub stakeholders: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "7")]
    pub acting_parties: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// The identifier uses the package-id reference format.
    #[prost(message, optional, tag = "8")]
    pub interface_id: ::core::option::Option<super::super::super::Identifier>,
    #[prost(string, tag = "9")]
    pub choice_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "10")]
    pub chosen_value: ::core::option::Option<super::super::super::Value>,
    #[prost(bool, tag = "11")]
    pub consuming: bool,
    #[prost(string, repeated, tag = "12")]
    pub children: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "13")]
    pub exercise_result: ::core::option::Option<super::super::super::Value>,
    #[prost(string, repeated, tag = "14")]
    pub choice_observers: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Create Node
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Create {
    /// Specific LF version of the node
    #[prost(string, tag = "1")]
    pub lf_version: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub contract_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub package_name: ::prost::alloc::string::String,
    /// The identifier uses the package-id reference format.
    #[prost(message, optional, tag = "4")]
    pub template_id: ::core::option::Option<super::super::super::Identifier>,
    #[prost(message, optional, tag = "5")]
    pub argument: ::core::option::Option<super::super::super::Value>,
    #[prost(string, repeated, tag = "6")]
    pub signatories: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "7")]
    pub stakeholders: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Rollback Node
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Rollback {
    #[prost(string, repeated, tag = "1")]
    pub children: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Node {
    #[prost(oneof = "node::NodeType", tags = "1, 2, 3, 4")]
    pub node_type: ::core::option::Option<node::NodeType>,
}
/// Nested message and enum types in `Node`.
pub mod node {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum NodeType {
        #[prost(message, tag = "1")]
        Create(super::Create),
        #[prost(message, tag = "2")]
        Fetch(super::Fetch),
        #[prost(message, tag = "3")]
        Exercise(super::Exercise),
        #[prost(message, tag = "4")]
        Rollback(super::Rollback),
    }
}
