#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
#[repr(u8)]
pub enum NumericScale {
    NumericScale0 = 0,
    NumericScale1 = 1,
    NumericScale2 = 2,
    NumericScale3 = 3,
    NumericScale4 = 4,
    NumericScale5 = 5,
    NumericScale6 = 6,
    NumericScale7 = 7,
    NumericScale8 = 8,
    NumericScale9 = 9,
    NumericScale10 = 10,
    NumericScale11 = 11,
    NumericScale12 = 12,
    NumericScale13 = 13,
    NumericScale14 = 14,
    NumericScale15 = 15,
    NumericScale16 = 16,
    NumericScale17 = 17,
    NumericScale18 = 18,
    NumericScale19 = 19,
    NumericScale20 = 20,
    NumericScale21 = 21,
    NumericScale22 = 22,
    NumericScale23 = 23,
    NumericScale24 = 24,
    NumericScale25 = 25,
    NumericScale26 = 26,
    NumericScale27 = 27,
    NumericScale28 = 28,
    NumericScale29 = 29,
    NumericScale30 = 30,
    NumericScale31 = 31,
    NumericScale32 = 32,
    NumericScale33 = 33,
    NumericScale34 = 34,
    NumericScale35 = 35,
    NumericScale36 = 36,
    NumericScale37 = 37,
}

impl NumericScale {
    /// Convert from u8 to NumericScale. Returns None if out of range.
    pub fn from_u8(n: u8) -> Option<Self> {
        match n {
            0 => Some(NumericScale::NumericScale0),
            1 => Some(NumericScale::NumericScale1),
            2 => Some(NumericScale::NumericScale2),
            3 => Some(NumericScale::NumericScale3),
            4 => Some(NumericScale::NumericScale4),
            5 => Some(NumericScale::NumericScale5),
            6 => Some(NumericScale::NumericScale6),
            7 => Some(NumericScale::NumericScale7),
            8 => Some(NumericScale::NumericScale8),
            9 => Some(NumericScale::NumericScale9),
            10 => Some(NumericScale::NumericScale10),
            11 => Some(NumericScale::NumericScale11),
            12 => Some(NumericScale::NumericScale12),
            13 => Some(NumericScale::NumericScale13),
            14 => Some(NumericScale::NumericScale14),
            15 => Some(NumericScale::NumericScale15),
            16 => Some(NumericScale::NumericScale16),
            17 => Some(NumericScale::NumericScale17),
            18 => Some(NumericScale::NumericScale18),
            19 => Some(NumericScale::NumericScale19),
            20 => Some(NumericScale::NumericScale20),
            21 => Some(NumericScale::NumericScale21),
            22 => Some(NumericScale::NumericScale22),
            23 => Some(NumericScale::NumericScale23),
            24 => Some(NumericScale::NumericScale24),
            25 => Some(NumericScale::NumericScale25),
            26 => Some(NumericScale::NumericScale26),
            27 => Some(NumericScale::NumericScale27),
            28 => Some(NumericScale::NumericScale28),
            29 => Some(NumericScale::NumericScale29),
            30 => Some(NumericScale::NumericScale30),
            31 => Some(NumericScale::NumericScale31),
            32 => Some(NumericScale::NumericScale32),
            33 => Some(NumericScale::NumericScale33),
            34 => Some(NumericScale::NumericScale34),
            35 => Some(NumericScale::NumericScale35),
            36 => Some(NumericScale::NumericScale36),
            37 => Some(NumericScale::NumericScale37),
            _ => None,
        }
    }
    /// Get the numeric value.
    pub fn value(self) -> u8 {
        self as u8
    }
}