{-# LANGUAGE ApplicativeDo #-}
module Main where

import Daml.Script

type AssetId = ContractId Asset

template Asset
  with
    issuer : Party
    owner  : Party
    name   : Text
  where
    ensure name /= ""
    signatory issuer
    observer owner
    choice Give : AssetId
      with
        newOwner : Party
      controller owner
      do 
        create this with
          owner = newOwner
    nonconsuming choice GetView: Asset
      controller owner
      do return this

setup : Script AssetId
setup = script do
-- user_setup_begin
  alice <- allocatePartyByHint (PartyIdHint "Alice")
  bob <- allocatePartyByHint (PartyIdHint "Bob")
  aliceId <- validateUserId "alice"
  bobId <- validateUserId "bob"
  createUser (User aliceId (Some alice)) [CanActAs alice]
  createUser (User bobId (Some bob)) [CanActAs bob]
-- user_setup_end

  aliceTV <- submit alice do
    createCmd Asset with
      issuer = alice
      owner = alice
      name = "TV"

  bobTV <- submit alice do
    exerciseCmd aliceTV Give with newOwner = bob

  submit bob do
    exerciseCmd bobTV Give with newOwner = alice

-- setup : Script ()
-- setup = script do
-- -- user_setup_begin
--   alice <- allocatePartyByHint (PartyIdHint "Alice")
--   bob <- allocatePartyByHint (PartyIdHint "Bob")
--   aliceId <- validateUserId "alice_user"
--   bobId <- validateUserId "bob_user"
--   createUser (User aliceId (Some alice)) [CanActAs alice]
--   createUser (User bobId (Some bob)) [CanActAs bob]
-- -- user_setup_end

--   submit alice $ do
--     _ <- createCmd Asset with
--       issuer = alice
--       owner = alice
--       name = "TV1"

--     _ <- createCmd Asset with
--       issuer = alice
--       owner = alice
--       name = "TV2"

--     pure ()